from Newtons import rate_of_change
from Newtons import calculate_k
from Newtons import temperature_at_time
from HypothesisTestingNewtons import hypothesis_test
import math

def test_rate_of_change():
    """
    Test the rate of change of temperature over time.

    1_e -5 is scientific notation for 0.00001
    This is a small tolerance for floating point comparisons.
    """
    initial_temp = 100
    temp_final = 70
    dt = 10

    test_expected_rate = (initial_temp - temp_final) / dt
    expected_rate = rate_of_change(initial_temp, temp_final, dt)
    
    assert math.isclose(test_expected_rate, expected_rate, rel_tol=1e-5), f"Expected {test_expected_rate}, and got {expected_rate}"


def test_calculate_k():
    """
    Test the calculation of the cooling constant 'k'.
    """
    initial_temp = 100
    temp_final = 70
    temp_env = 60
    dt = 10

    test_expected_k = -math.log((temp_final - temp_env) / (initial_temp - temp_env)) / dt
    expected_k = calculate_k(initial_temp, temp_final, temp_env, dt)
    
    assert math.isclose(test_expected_k, expected_k, rel_tol=1e-5), f"Expected {test_expected_k}, and got {expected_k}"


def test_temperature_at_time():
    """
    Test the temperature at a given time using the cooling constant 'k'.

    the below value of k is assumed to be 0.1 for the test.
    """
    
    initial_temp = 100
    temp_env = 60
    dt = 10
    k = 0.14

    test_expected_temp_at_t = temp_env + (initial_temp - temp_env) * math.exp(-k * dt)
    expected_temp_at_t = temperature_at_time(initial_temp, temp_env, k, dt)

    assert math.isclose(test_expected_temp_at_t, expected_temp_at_t, rel_tol=1e-5), f"Expected {test_expected_temp_at_t}, and got {expected_temp_at_t}"

def test_hypothesis_test():
    """
    Test the hypothesis test function.
    """
    initial_temp = 100
    temp_final = 70
    temp_env = 60
    dt = 10
    real_world_value = 75

    k = calculate_k(initial_temp, temp_final, temp_env, dt)
    modeled_value = temperature_at_time(initial_temp, temp_env, dt, k)
    margin_of_error = 0.05 * real_world_value
    lower_bound = real_world_value - margin_of_error
    upper_bound = real_world_value + margin_of_error
    
    result = hypothesis_test(initial_temp, temp_final, temp_env, dt, real_world_value)
    
    assert (
        ("Failed to reject null hypothesis" in result and lower_bound <= modeled_value <= upper_bound)
        or
        ("Reject null hypothesis" in result and not (lower_bound <= modeled_value <= upper_bound))
    ), f"Expected {result} to be within bounds [{lower_bound}, {upper_bound}]."
