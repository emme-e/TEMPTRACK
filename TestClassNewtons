from ClassNewtons import rate_of_change
from ClassNewtons import calculate_k
from ClassNewtons import temperature_at_time
import math

def test_rate_of_change(initial_temp, temp_final, dt):
    """
    Test the rate of change of temperature over time.
    """
    initial_temp = 100
    temp_final = 80
    dt = 10

    test_expected_rate = (initial_temp - temp_final) / dt
    expected_rate = rate_of_change(initial_temp, temp_final, dt)
    
    assert test_expected_rate == expected_rate



def test_calculate_k(initial_temp, temp_final, temp_env, dt):
    """
    Test the calculation of the cooling constant 'k'.
    """
    initial_temp = 100
    temp_final = 80
    temp_env = 25
    dt = 10

    test_expected_k = -math.log((temp_final - temp_env) / (initial_temp - temp_env)) / dt
    expected_k = calculate_k(initial_temp, temp_final, temp_env, dt)
    
    assert test_expected_k == expected_k

def test_temperature_at_time(initial_temp, temp_env, dt, k):
    """
    Test the temperature at a given time using the cooling constant 'k'.
    1_e -5 is scientific notation for 0.00001
    This is a small tolerance for floating point comparisons.
    the below value of k is assumed to be 0.1 for the test.
    """
    
    initial_temp = 100
    temp_env = 25
    dt = 10
    k = 0.1

    test_expected_temp_at_t = temp_env + (initial_temp - temp_env) * math.exp(-k * dt)
    expected_temp_at_t = temperature_at_time(initial_temp, temp_env, k, dt)

    assert math.isclose(test_expected_temp_at_t, expected_temp_at_t, rel_tol=1e-5)
